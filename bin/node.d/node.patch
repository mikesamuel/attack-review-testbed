diff --git a/lib/internal/modules/cjs/helpers.js b/lib/internal/modules/cjs/helpers.js
index df727ff3c8..b54300fb29 100644
--- a/lib/internal/modules/cjs/helpers.js
+++ b/lib/internal/modules/cjs/helpers.js
@@ -72,10 +72,10 @@ function stripShebang(content) {
 
 const builtinLibs = [
   'assert', 'async_hooks', 'buffer', 'child_process', 'cluster', 'crypto',
-  'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'http2', 'https', 'net',
-  'os', 'path', 'perf_hooks', 'punycode', 'querystring', 'readline', 'repl',
-  'stream', 'string_decoder', 'tls', 'trace_events', 'tty', 'url', 'util',
-  'v8', 'vm', 'worker_threads', 'zlib'
+  'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'http2', 'https',
+  'module-keys', 'net', 'os', 'path', 'perf_hooks', 'punycode', 'querystring',
+  'readline', 'repl', 'stream', 'string_decoder', 'tls', 'trace_events', 'tty',
+  'url', 'util', 'v8', 'vm', 'worker_threads', 'zlib'
 ];
 
 if (typeof internalBinding('inspector').open === 'function') {
diff --git a/lib/internal/modules/cjs/loader.js b/lib/internal/modules/cjs/loader.js
index de97f03dd4..e5ed56c9e8 100644
--- a/lib/internal/modules/cjs/loader.js
+++ b/lib/internal/modules/cjs/loader.js
@@ -61,6 +61,10 @@ let asyncESM;
 let ModuleJob;
 let createDynamicModule;
 
+const modulekeys = require('module-keys');
+const { apply } = Reflect;
+const { defineProperties, hasOwnProperty } = Object;
+
 const {
   CHAR_UPPERCASE_A,
   CHAR_LOWERCASE_A,
@@ -709,6 +713,7 @@ Module.prototype.load = function(filename) {
   }
 };
 
+let requireModuleHook;
 
 // Loads a module at the given file path. Returns that module's
 // `exports` property.
@@ -718,6 +723,27 @@ Module.prototype.require = function(id) {
     throw new ERR_INVALID_ARG_VALUE('id', id,
                                     'must be a non-empty string');
   }
+
+  if (requireModuleHook === undefined) {  // On first module load.
+    requireModuleHook = null;  // Do not invoke bootstrap to find the hook.
+    var hookid = getOptionValue('--cjs-loader');
+    if (hookid && typeof hookid === 'string') {
+      var hook = this.require(hookid);
+      if (typeof hook === 'function') {
+        requireModuleHook = hook;
+      }
+    }
+  }
+
+  if (typeof requireModuleHook === 'function') {
+    id = requireModuleHook(
+      this.filename, this.id, id,
+      (req, opts) => Module._resolveFilename(req, this, false, opts));
+
+    assert(id, 'missing id from hook');
+    assert(typeof id === 'string', 'id from hook must be a string');
+  }
+
   requireDepth++;
   try {
     return Module._load(id, this, /* isMain */ false);
@@ -804,8 +830,28 @@ Module.prototype._compile = function(content, filename) {
   }
   const dirname = path.dirname(filename);
   const require = makeRequireFunction(this);
+
+  var keys = modulekeys.makeModuleKeys(this.id);
+  require.moduleKeys = keys;
+  defineProperties(
+    this.exports,
+    {
+      publicKey: {
+        value: keys.publicKey,
+        writable: true,
+        configurable: true
+        // Not enumerable for backwards compatibility
+      },
+      [modulekeys.publicKeySymbol]: {
+        value: keys.publicKey,
+        writable: true,
+        configurable: true
+        // Not enumerable for backwards compatibility
+      },
+    });
+
   var result;
-  const exports = this.exports;
+  let exports = this.exports;
   const thisValue = exports;
   const module = this;
   if (requireDepth === 0) statCache = new Map();
@@ -817,6 +863,27 @@ Module.prototype._compile = function(content, filename) {
                                   filename, dirname);
   }
   if (requireDepth === 0) statCache = null;
+  exports = this.exports;
+  if (exports &&
+      (typeof exports === 'object' || typeof exports === 'function')) {
+    function addKeyBack(keyKey) {
+      if (!apply(hasOwnProperty, exports, [ keyKey ])) {
+        try {
+          defineProperties(
+            exports,
+            {
+              [keyKey]: {
+                value: keys.publicKey
+              }
+            });
+        } catch (exc) {
+          // ok if exports are frozen
+        }
+      }
+    }
+    addKeyBack('publicKey');
+    addKeyBack(modulekeys.publicKeySymbol);
+  }
   return result;
 };
 
diff --git a/lib/module-keys.js b/lib/module-keys.js
new file mode 100644
index 0000000000..07b2356150
--- /dev/null
+++ b/lib/module-keys.js
@@ -0,0 +1,264 @@
+'use strict';
+
+/**
+ * @fileoverview
+ * Allow modules to establish secure channels to other modules.
+ * This is a general purpose building block that aims to enable:
+ * - product teams to grant more privilege to dependencies they
+ *   know are compatible with their security needs than to the
+ *   bulk of dependencies.
+ * - allow conveying sensitive data (secrets, passwords, PII) from
+ *   one part of a system to another that are opaque to cross-cutting
+ *   concerns like logging.
+ * - allow modules that provide APIs that are unsafe when not used
+ *   very carefully to interact closely with carefully vetted modules
+ *   but failsafe when used by general purpose code.
+ */
+
+// Capture some globals so we can rely on them later
+const {
+  create, defineProperties, defineProperty, freeze, getOwnPropertyNames,
+  getPrototypeOf, prototype: ObjectPrototype,
+} = Object;
+const { apply: fApply, call: fCall } = Function.prototype;
+
+/**
+ * Called before attacker-controlled code on an internal collections,
+ * copies prototype members onto the instance directly, so that later
+ * changes to prototypes cannot expose collection internals.
+ * @param {!T} collection
+ * @return {!T} collection
+ * @template T
+ */
+function selfContained(collection) {
+  const proto = getPrototypeOf(collection);
+  /* istanbul ignore if */
+  if (!proto || getPrototypeOf(proto) !== ObjectPrototype) {
+    // The loop below is insufficient.
+    throw new Error();
+  }
+  for (const key of getOwnPropertyNames(proto)) {
+    defineProperty(collection, key, { value: collection[key] });
+  }
+  return collection;
+}
+
+/**
+ * Maps opaque boxes to box data records.
+ *
+ * @type {!WeakMap<!Box,BoxPrivates>}
+ */
+const boxes = selfContained(new WeakMap());
+
+/**
+ * A set of all public keys.
+ *
+ * @type {!WeakSet<!PublicKey>}
+ */
+const publicKeys = selfContained(new WeakSet());
+
+/**
+ * True iff the given function is in fact a public key.
+ *
+ * Public keys are represented as functions that return true
+ * iff called during the execution of their matching private key.
+ *
+ * @type {!function(*):boolean}
+ */
+const isPublicKey = publicKeys.has.bind(publicKeys);
+
+/**
+ * Symbol used to attach public keys to CommonJS exports.
+ */
+const publicKeySymbol = Symbol('publicKey');
+
+/** An opaque token used to represent a boxed value in transit. */
+class Box {
+  toString() { // eslint-disable-line class-methods-use-this
+    return '[Box]';
+  }
+}
+
+/**
+ * Space for collaboration between the private and public
+ * halves of a public/private key pair.
+ */
+let hidden;
+
+/**
+ * Creates a bundle that should be available as a local variable to module code.
+ */
+function makeModuleKeys(moduleIdentifier) {
+  // Allocate a public/private key pair.
+  function privateKey(fun) {
+    const previous = hidden;
+
+    hidden = privateKey;
+    try {
+      return fun();
+    } finally {
+      hidden = previous;
+    }
+  }
+  function publicKey() {
+    return hidden === privateKey;
+  }
+  publicKeys.add(publicKey);
+
+  // Allow a private key to be used in lieu of the pair.
+  defineProperty(
+    privateKey, 'publicKey', { value: publicKey, enumerable: true });
+
+  // We attach a module identifier to the public key to enable
+  // whitelisting based on strings in a configuration without having
+  // to load modules before storing their public key in a set.
+  defineProperties(
+    publicKey,
+    {
+      moduleIdentifier: { value: `${moduleIdentifier}`, enumerable: true },
+      call: { value: fCall, enumerable: true },
+      apply: { value: fApply, enumerable: true },
+    });
+
+  /**
+   * Wraps a value in a box so that only an approved
+   * opener may unbox it.
+   *
+   * @param {*} value the value that will be given to
+   *    an approved unboxer.
+   * @param {!function(function():boolean):boolean} mayOpen
+   *    receives the public key of the opener.
+   *    Should return `true` to allow.
+   *    This will be called in the context of the opener's
+   *    private key, so the public key should also return true
+   *    called with no arguments.
+   * @return {!Box} a box that is opaque to any receivers that cannot
+   *    unbox it.
+   */
+  function box(value, mayOpen) {
+    if (typeof mayOpen !== 'function') {
+      throw new TypeError(`Expected function not ${mayOpen}`);
+    }
+    // Allocate an opaque token
+    const newBox = new Box();
+    boxes.set(
+      newBox,
+      freeze({ boxerPriv: privateKey, boxerPub: publicKey, value, mayOpen }));
+    return newBox;
+  }
+
+  /**
+   * Tries to open a box.
+   *
+   * @param {*} box the box to unbox.
+   * @param {?function(function():boolean):boolean} ifFrom
+   *    if the box may be opened by this unboxer's owner,
+   *    then ifFrom receives the publicKey of the box creator.
+   *    It should return true to allow unboxing to proceed.
+   * @param {*} fallback a value to substitute if unboxing failed.
+   *    Defaults to undefined.
+   * @return {*} the value if unboxing is allowed or fallback otherwise.
+   */
+  function unbox(box, ifFrom, fallback) { // eslint-disable-line no-shadow
+    if (ifFrom == null) { // eslint-disable-line
+      ifFrom = () => true;
+    }
+    if (typeof ifFrom !== 'function') {
+      throw new TypeError(`Expected function not ${ifFrom}`);
+    }
+    const boxData = boxes.get(box);
+    if (!boxData) {
+      return fallback;
+    }
+    const { boxerPriv, boxerPub, value, mayOpen } = boxData;
+    // Require mutual consent
+    // TODO: Is this the object identity equivalent of an
+    // out-of-order verify/decrypt fault?
+    // http://world.std.com/~dtd/sign_encrypt/sign_encrypt7.html
+    return (privateKey(() => mayOpen(publicKey)) === true &&
+            boxerPriv(() => ifFrom(boxerPub)) === true) ?
+      value :
+      fallback;
+  }
+
+  const neverBoxed = {};
+  /**
+   * Like unbox but raises an exception if unboxing fails.
+   * @param {*} box the box to unbox.
+   * @param {?function(function():boolean):boolean} ifFrom
+   *    if the box may be opened by this unboxer's owner,
+   *    then ifFrom receives the publicKey of the box creator.
+   *    It should return true to allow unboxing to proceed.
+   * @return {*} the value if unboxing is allowed or fallback otherwise.
+   */
+  function unboxStrict(box, ifFrom) { // eslint-disable-line no-shadow
+    const result = unbox(box, ifFrom, neverBoxed);
+    if (result === neverBoxed) {
+      throw new Error('Could not unbox');
+    }
+    return result;
+  }
+
+  return defineProperties(
+    create(null),
+    {
+      // These close over private keys, so do not leak them.
+      box: { value: box, enumerable: true },
+      unbox: { value: unbox, enumerable: true },
+      unboxStrict: { value: unboxStrict, enumerable: true },
+      privateKey: { value: privateKey, enumerable: true },
+      isPublicKey: { value: isPublicKey, enumerable: true },
+
+      // Modules may allow access to this, perhaps via module object.
+      publicKey: { value: publicKey, enumerable: true },
+      [publicKeySymbol]: { value: publicKey, enumerable: true },
+    });
+}
+
+// CommonJS specific
+const { publicKey: myPublicKey } = makeModuleKeys('module-keys');
+
+module.exports = freeze(defineProperties(
+  create(null),
+  {
+    Box: { value: Box, enumerable: true },
+    makeModuleKeys: { value: makeModuleKeys, enumerable: true },
+    isPublicKey: { value: isPublicKey, enumerable: true },
+    publicKeySymbol: { value: publicKeySymbol, enumerable: true },
+
+    // The public key for this module.  Exported for consistency.
+    publicKey: { value: myPublicKey },
+    [publicKeySymbol]: { value: myPublicKey },
+  }));
+
+// Prevent private key gathering via replacement.
+for (const [ propertyName, descriptor ]
+  of Object.entries(Object.getOwnPropertyDescriptors(module))) {
+  /* istanbul ignore if */
+  if (!descriptor.configurable) {
+    continue;
+  }
+  let tamperProofDescriptor = descriptor;
+  if (propertyName === 'loaded') {
+    // I know of no vulnerability if this is not monotonic, but
+    // just to be safe we make it impossible to assign a falsey
+    // value after a truthy one has been assigned.
+    let value = descriptor.value;
+    tamperProofDescriptor = {
+      set(x) {
+        if (value && !x) {
+          throw new Error();
+        }
+        value = !!x;
+      },
+      get() {
+        return value;
+      },
+    };
+  } else {
+    tamperProofDescriptor.writable = propertyName === 'loading';
+    tamperProofDescriptor.configurable = false;
+  }
+  delete module[propertyName];
+  defineProperty(module, propertyName, tamperProofDescriptor);
+}
diff --git a/node.gyp b/node.gyp
index f6d8d8c6cb..ab5c4cec0c 100644
--- a/node.gyp
+++ b/node.gyp
@@ -47,6 +47,7 @@
       'lib/dns.js',
       'lib/domain.js',
       'lib/events.js',
+      'lib/module-keys.js',
       'lib/fs.js',
       'lib/http.js',
       'lib/http2.js',
diff --git a/src/node_options.cc b/src/node_options.cc
index 16880ecda9..467aa8234b 100644
--- a/src/node_options.cc
+++ b/src/node_options.cc
@@ -246,6 +246,10 @@ EnvironmentOptionsParser::EnvironmentOptionsParser() {
             "custom loader",
             &EnvironmentOptions::userland_loader,
             kAllowedInEnvironment);
+  AddOption("--cjs-loader",
+            "use the specified file as a custom loader for required modules",
+            &EnvironmentOptions::cjs_userland_loader,
+            kAllowedInEnvironment);
   AddOption("--no-deprecation",
             "silence deprecation warnings",
             &EnvironmentOptions::no_deprecation,
diff --git a/src/node_options.h b/src/node_options.h
index 441b8a43c6..934168adaa 100644
--- a/src/node_options.h
+++ b/src/node_options.h
@@ -126,6 +126,7 @@ class EnvironmentOptions : public Options {
   bool trace_sync_io = false;
   bool trace_warnings = false;
   std::string userland_loader;
+  std::string cjs_userland_loader;
 
   bool syntax_check_only = false;
   bool has_eval_string = false;
